const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function updateUserNames() {
  console.log('üîß Atualizando nomes dos usu√°rios...')
  
  try {
    // Buscar usu√°rios sem full_name
    const { data: users, error } = await supabase
      .from('calc_users')
      .select('*')
      .is('full_name', null)
    
    if (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error)
      return
    }
    
    if (users.length === 0) {
      console.log('‚úÖ Todos os usu√°rios j√° t√™m nome definido!')
      return
    }
    
    console.log(`üìä Encontrados ${users.length} usu√°rios sem nome:`)
    
    for (const user of users) {
      // Extrair nome do email (parte antes do @)
      const emailName = user.email.split('@')[0]
      const fullName = emailName.charAt(0).toUpperCase() + emailName.slice(1)
      
      console.log(`\nüë§ Atualizando ${user.email}:`)
      console.log(`   Nome sugerido: ${fullName}`)
      
      // Atualizar o usu√°rio
      const { error: updateError } = await supabase
        .from('calc_users')
        .update({ full_name: fullName })
        .eq('id', user.id)
      
      if (updateError) {
        console.error(`   ‚ùå Erro ao atualizar: ${updateError.message}`)
      } else {
        console.log(`   ‚úÖ Atualizado com sucesso!`)
      }
    }
    
    console.log('\nüéâ Atualiza√ß√£o conclu√≠da!')
    
  } catch (error) {
    console.error('‚ùå Erro:', error)
  }
}

updateUserNames()
