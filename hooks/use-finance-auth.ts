"use client"

import { useState, useEffect } from "react"
import type { User, AuthResponse } from "@supabase/supabase-js"
import { supabase, isSupabaseConfigured } from "@/lib/supabase"

// Chaves para localStorage
const AUTH_CACHE_KEY = 'calcfy_auth_cache'
const AUTH_TIMESTAMP_KEY = 'calcfy_auth_timestamp'

// Tempo de cache em milissegundos (30 minutos)
const CACHE_DURATION = 30 * 60 * 1000

interface AuthCache {
  user: User | null
  financeUser: any
  timestamp: number
}

export function useFinanceAuth() {
  const [user, setUser] = useState<User | null>(null)
  const [financeUser, setFinanceUser] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  // Fun√ß√£o para salvar no cache local
  const saveToCache = (user: User | null, financeUser: any) => {
    if (typeof window === 'undefined') return
    
    const cache: AuthCache = {
      user,
      financeUser,
      timestamp: Date.now()
    }
    
    try {
      localStorage.setItem(AUTH_CACHE_KEY, JSON.stringify(cache))
      console.log("üíæ Estado de autentica√ß√£o salvo no cache local")
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao salvar no cache local:", error)
    }
  }

  // Fun√ß√£o para carregar do cache local
  const loadFromCache = (): AuthCache | null => {
    if (typeof window === 'undefined') return null
    
    try {
      const cached = localStorage.getItem(AUTH_CACHE_KEY)
      if (!cached) return null
      
      const cache: AuthCache = JSON.parse(cached)
      const now = Date.now()
      
      // Verificar se o cache ainda √© v√°lido
      if (now - cache.timestamp > CACHE_DURATION) {
        console.log("‚è∞ Cache expirado, removendo...")
        localStorage.removeItem(AUTH_CACHE_KEY)
        return null
      }
      
      console.log("‚úÖ Cache v√°lido encontrado, carregando...")
      return cache
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao carregar cache local:", error)
      return null
    }
  }

  // Fun√ß√£o para limpar o cache
  const clearCache = () => {
    if (typeof window === 'undefined') return
    
    try {
      // Limpar todos os itens relacionados √† autentica√ß√£o
      localStorage.removeItem(AUTH_CACHE_KEY)
      localStorage.removeItem(AUTH_TIMESTAMP_KEY)
      
      // Limpar outros poss√≠veis caches de autentica√ß√£o
      const keysToRemove = []
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i)
        if (key && (key.includes('auth') || key.includes('user') || key.includes('session'))) {
          keysToRemove.push(key)
        }
      }
      
      keysToRemove.forEach(key => localStorage.removeItem(key))
      
      console.log("üóëÔ∏è Cache local limpo completamente")
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao limpar cache local:", error)
    }
  }

  // Verifica√ß√£o simples de autentica√ß√£o - SEM LOOPS
  useEffect(() => {
    if (!isSupabaseConfigured()) {
      setLoading(false)
      return
    }

    // Verifica√ß√£o √∫nica e simples
    const checkAuth = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser()
        setUser(user)
        setFinanceUser(user)
      } catch (error) {
        console.error("Erro na verifica√ß√£o:", error)
        setUser(null)
        setFinanceUser(null)
      } finally {
        setLoading(false)
      }
    }

    checkAuth()

    // Escutar mudan√ßas de auth (apenas para login/logout)
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event: any, session: any) => {
      if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {
        setUser(session?.user ?? null)
        setFinanceUser(session?.user ?? null)
        setLoading(false)
      }
    })

    return () => subscription.unsubscribe()
  }, [])

  const signUp = async (email: string, password: string, fullName?: string) => {
    if (!isSupabaseConfigured()) {
      throw new Error("Supabase not configured")
    }

    try {
      const { data, error }: AuthResponse = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: fullName,
          },
        },
      })

      if (error) throw error

      // Criar perfil do usu√°rio na tabela calc_users
      if (data.user) {
        const { error: profileError } = await supabase
          .from('calc_users')
          .insert([
            {
              id: data.user.id,
              email: data.user.email,
              full_name: fullName,
              created_at: new Date().toISOString(),
            },
          ])

        if (profileError) {
          console.warn("Error creating user profile:", profileError.message)
        }
      }

      return { data, error: null }
    } catch (error) {
      console.error("Error signing up:", error)
      throw error
    }
  }

  const signIn = async (email: string, password: string) => {
    console.log("üîê Iniciando processo de login...")
    console.log("üìß Email:", email)
    console.log("üîë Supabase configurado:", isSupabaseConfigured())
    
    if (!isSupabaseConfigured()) {
      console.error("‚ùå Supabase n√£o est√° configurado!")
      throw new Error("Supabase not configured")
    }

    // Valida√ß√£o b√°sica
    if (!email || !password) {
      throw new Error("Email e senha s√£o obrigat√≥rios")
    }

    if (!email.includes('@')) {
      throw new Error("Email inv√°lido")
    }

    try {
      console.log("üöÄ Chamando supabase.auth.signInWithPassword...")
      const { data, error }: AuthResponse = await supabase.auth.signInWithPassword({
        email: email.trim().toLowerCase(),
        password,
      })

      console.log("üìä Resposta do Supabase:", { 
        hasData: !!data, 
        hasUser: !!data?.user, 
        hasError: !!error,
        errorMessage: error?.message 
      })

      if (error) {
        console.error("‚ùå Erro do Supabase:", error)
        throw error
      }

      if (!data?.user) {
        console.error("‚ùå Login retornou sem usu√°rio")
        throw new Error("Erro interno: usu√°rio n√£o encontrado")
      }

      console.log("‚úÖ Login bem-sucedido! Atualizando √∫ltimo login...")

      // Atualizar √∫ltimo login na tabela calc_users (opcional, n√£o bloquear se falhar)
      try {
        const { error: updateError } = await supabase
          .from('calc_users')
          .update({ last_login: new Date().toISOString() })
          .eq('id', data.user.id)

        if (updateError) {
          console.warn("‚ö†Ô∏è Erro ao atualizar √∫ltimo login:", updateError.message)
        } else {
          console.log("‚úÖ √öltimo login atualizado com sucesso!")
        }
      } catch (updateError) {
        console.warn("‚ö†Ô∏è Erro ao atualizar √∫ltimo login (n√£o cr√≠tico):", updateError)
      }

      console.log("üéâ Login completado com sucesso!")
      return { data, error: null }
    } catch (error) {
      console.error("üí• Erro durante o login:", error)
      throw error
    }
  }

  const signOut = async () => {
    console.log("üö™ Iniciando processo de logout...")
    console.log("üîß Usu√°rio atual antes do logout:", user?.email)
    
    // PRIMEIRO: Limpar estado local IMEDIATAMENTE para evitar relogin
    setUser(null)
    setFinanceUser(null)
    clearCache()
    
    if (!isSupabaseConfigured()) {
      console.warn("‚ùå Supabase not configured")
      if (typeof window !== 'undefined') {
        window.location.href = '/'
      }
      return
    }

    try {
      console.log("üîì Chamando supabase.auth.signOut()...")
      
      // Adicionar timeout para evitar travamento
      const signOutPromise = supabase.auth.signOut()
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 3000)
      )
      
      const { error } = await Promise.race([signOutPromise, timeoutPromise]) as any
      
      if (error) {
        console.error("‚ùå Erro no logout:", error)
        // Estado j√° foi limpo acima, apenas redirecionar
        if (typeof window !== 'undefined') {
          window.location.href = '/'
        }
        return
      }
      
      console.log("‚úÖ Logout realizado com sucesso!")
      
      // Redirecionar para a p√°gina inicial
      if (typeof window !== 'undefined') {
        console.log("üîÑ Redirecionando para p√°gina inicial...")
        window.location.href = '/'
      }
      
    } catch (error) {
      console.error("‚ùå Erro no logout:", error)
      // Estado j√° foi limpo acima, apenas redirecionar
      if (typeof window !== 'undefined') {
        console.log("üîÑ Redirecionando mesmo com erro...")
        window.location.href = '/'
      }
    }
  }

  const resetPassword = async (email: string) => {
    if (!isSupabaseConfigured()) {
      throw new Error("Supabase not configured")
    }

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`,
      })

      if (error) throw error
      return { error: null }
    } catch (error) {
      console.error("Error resetting password:", error)
      throw error
    }
  }

  return {
    user,
    financeUser,
    loading,
    signUp,
    signIn,
    signOut,
    resetPassword,
    isConfigured: isSupabaseConfigured(),
  }
}